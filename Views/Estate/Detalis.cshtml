@model GP.Models.Estate

@{
    
    ViewData["Title"] = "Detalis";
       // Layout = "~/Views/Shared/_LayoutOwner.cshtml";

          if (User.IsInRole("Owner"))
    {
        Layout = "/Areas/Identity/Pages/Account/Manage/_Layout.cshtml"; 
    }

}
<div class="text-start position-absolute left-0" style="border-bottom: 2px solid var(--orange);left: 20px;top: 20px;">
    <a asp-action="Index" style="text-decoration:none; color:var(--orange);">رجوع للعقارات <i class="bi bi-arrow-90deg-right"></i></a>
</div>


@if (GP.Models.Toast.ShowTost)
{
    GP.Models.Toast.ShowTost = false;
    <div id="mymessage" class="toast align-items-center text-white bg-success border-0" role="alert"  data-delay="10000" data-autohide="true" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                @GP.Models.Toast.Message
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
}




<div class="container-fluid pt-5 pt-lg-0">
    <div class="row">
     <div class="col-12 col-md-8 ">


      <p>
            <div class="d-flex justify-content-around">
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.name_owner): </span><strong>@Html.DisplayFor(model => model.name_owner)</strong></p>
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.phone_num)</span><strong>@Html.DisplayFor(model => model.phone_num)</strong></p>
            </div>
        </p>

        <p class="fs-4"><strong>- @Html.DisplayFor(model => model.name)</strong><sub><span>@Html.DisplayFor(model => model.Type.type)</span>  <span>@Html.DisplayFor(model => model.Category.category)</span></sub></p>

        
        <p class="fs-5"><span> @Html.DisplayFor(model => model.description)</span></p>
        <p class="fs-5 text-secondary"><strong><i class="bi bi-geo-alt-fill"></i> @Html.DisplayFor(model => model.State.name) - @Html.DisplayFor(model => model.City.name)</strong></p>

        <p>
            <div class="d-flex justify-content-around">
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.price): </span><strong>@Html.DisplayFor(model => model.price)@Html.DisplayFor(model => model.Currency.currency)</strong></p>
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.space): </span><strong>@Html.DisplayFor(model => model.space)</strong></p>
            </div>
        </p>
        <p>
            <div class="d-flex justify-content-around">
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.Longitude): </span><strong>@Html.DisplayFor(model => model.Longitude)</strong></p>
                <p class="px-3"><span>@Html.DisplayNameFor(model => model.Latitude): </span><strong>@Html.DisplayFor(model => model.Latitude)</strong></p>
            </div>
            <div id="googleMap" style="width: 100%; height: 450px; margin:12px 0;"></div>
        </p>

      </div>


      <div class="col-12 col-md-4 text-center pt-5 mt-3">
        <img class="img-fluid" src="~/images/Estate/@Html.DisplayFor(model => model.Main_photo)" />
        <p class="text-secondary py-3">@Html.DisplayFor(model => model.OnDate) <i class="bi bi-calendar-event"></i></p>
        <p>@Html.DisplayNameFor(model => model.is_active) @Html.DisplayFor(model => model.is_active)</p>
        <p>@Html.DisplayNameFor(model => model.is_spacial) @Html.DisplayFor(model => model.is_spacial)</p>
      </div>
    </div>
</div>



@*<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>*@


@section Scripts {
    <script>

        var myToastEl = document.getElementById('mymessage');
        var myToast = bootstrap.Toast.getOrCreateInstance(myToastEl);
        myToast.show();

    </script>

    
  

<script src='https://maps.googleapis.com/maps/api/js?akey=PUT_YOUR_KEY_HERE_AND_FIX_akey_TO_key&language=ar&region=SA'></script><script  src="./script.js"></script>
<script>
          
   

    var gmapdata;
var gmapmarker;
var infoWindow;
// This is a test Key will not work on your machine. YOU SHOULD CHANGE THIS API KEY.
// const gmap_key = '&key=PUT_YOUR_KEY_HERE';
const gmap_key = '';

// This needs to be audited for the city!!
var cityData = { CityId:0 };

function GoogleMapInit(long,lat,zoom) {
  var curpoint = new google.maps.LatLng(long, lat);

  var myStyle = 
  [
    {
      featureType: "administrative.country",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    },{
      featureType: "water",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    }/*,{
      featureType: "road",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    }*/
  ];

  var gmapdata = new google.maps.Map(document.getElementById('googleMap'), {
    mapTypeControlOptions: {
      mapTypeIds: ['TESTMAPID', google.maps.MapTypeId.SATELLITE]
    },
    center: curpoint,
    zoom: 16,
    mapTypeId: 'TESTMAPID',
    zoomControl: true,
    // mapTypeControl: false,
    scaleControl: false,
    streetViewControl: false,
    rotateControl: false,
    fullscreenControl: true
  });

  gmapdata.mapTypes.set('TESTMAPID', new google.maps.StyledMapType(myStyle, { name: 'My TEST MAP' }));

  gmapmarker = new google.maps.Marker({
      map: gmapdata,
      position: curpoint
  });

  google.maps.event.addListener(gmapdata, 'click', function (event) {
    gmapmarker.setPosition(event.latLng);
    jQuery('#Longitude').val(event.latLng.lng().toFixed(6));
    jQuery('#Latitude').val(event.latLng.lat().toFixed(6));
    jQuery.ajax({
      url: "https://maps.googleapis.com/maps/api/geocode/json?language=ar&region=SA&latlng=" + event.latLng.lat().toFixed(6) + ',' + event.latLng.lng().toFixed(6) + gmap_key,
      // contentType: json,
      processData: false,
      success: function (result) {
          console.log(result);
          jQuery('#edit-postal-code').val(GetLocationItem(result.results[0].address_components, "postal_code"));
          jQuery('#edit-postal-code-suffix').val(GetLocationItem(result.results[0].address_components, "postal_code_suffix"));
          jQuery('#edit-select-city').val(GetLocationItem(result.results[0].address_components, "locality"));
          jQuery('#edit-district-name').val(GetLocationItem(result.results[0].address_components, "sublocality_level_1"));
          jQuery('#edit-street-name').val(GetLocationItem(result.results[0].address_components, "route"));
          if (!GetLocationItem(result.results[0].address_components, "street_number")) {
            jQuery('#edit-building-number').val(GetLocationItem(result.results[0].address_components, "premise"));
          } else {
            jQuery('#edit-building-number').val(GetLocationItem(result.results[0].address_components, "street_number"));
          }
          
          cityData.CityName = GetLocationItem(result.results[0].address_components, "locality");
          // console.log(cityData.CityName);
          try {
            var cityObject = GetLocationObject(result.results, "locality");
            cityData.Longitude = cityObject.geometry.location.lng;
            cityData.Latitude = cityObject.geometry.location.lat;
            // console.log(cityData);
          } catch(err){}
          jQuery('#full-address').val(result.results[0].formatted_address);
      }, error: function (result) {
          alert(result);
      }
    })
    UpdateInfoWindow()
  });

  google.maps.event.addListener(gmapmarker, 'click', function () {
      UpdateInfoWindow()
      infoWindow.open(gmapdata, gmapmarker);
  });
  return false;
}

function GetLocationItem (object, key) {
  for (var i = 0; i < object.length; i++) {
    var typesList = object[i].types;
    for (var j = 0; j < typesList.length; j++) {
      if (typesList[j] == key) {
        return object[i].long_name;
      }
    }
  }
}

function GetLocationObject(object, key) {
  for (var i = 0; i < object.length; i++) {
    var typesList = object[i].types;
    for (var j = 0; j < typesList.length; j++) {
      if (typesList[j] == key) {
        return object[i];
      }
    }
  }
}

function UpdateInfoWindow() {
  infoWindow.setContent("Longitude: " + gmapmarker.getPosition().lng().toFixed(6) + "<br>" + "Latitude: " + gmapmarker.getPosition().lat().toFixed(6));
}

jQuery(document).ready(function () {
  // Set default value.
  GoogleMapInit(24.820457,46.643868,16);
});

</script>


  
}



